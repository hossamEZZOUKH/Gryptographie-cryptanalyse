/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package applicationfinale.Hill;

import javax.swing.ButtonGroup;

/**
 *
 * @author ayoub
 */
public class FrameHill extends javax.swing.JFrame {

    /**
     * Creates new form FrameHill
     */
    public FrameHill() {
        setTitle("\t\t\t\t\tMETHODE DE HILL  "); 
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        MESSAGE = new javax.swing.JTextArea();
        jLabel2 = new javax.swing.JLabel();
        a = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        b = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        c = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        d = new javax.swing.JTextField();
        CRYPTER = new javax.swing.JRadioButton();
        DECRYPTER = new javax.swing.JRadioButton();
        VALIDER = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        AFFICHAGE = new javax.swing.JTextPane();
        EXIT = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(204, 204, 204));
        jPanel1.setBorder(javax.swing.BorderFactory.createMatteBorder(4, 4, 4, 4, new java.awt.Color(255, 255, 0)));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel1.setText("MESSAGE :");

        MESSAGE.setColumns(20);
        MESSAGE.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        MESSAGE.setRows(5);
        jScrollPane1.setViewportView(MESSAGE);

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel2.setText("a=");

        a.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        a.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel3.setText("b=");

        b.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        b.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel4.setText("c=");

        c.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        c.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel5.setText("d=");

        d.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        d.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dActionPerformed(evt);
            }
        });

        group.add(CRYPTER);
        CRYPTER.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        CRYPTER.setText("CRYPTER");
        CRYPTER.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CRYPTERActionPerformed(evt);
            }
        });

        group.add(DECRYPTER);
        DECRYPTER.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        DECRYPTER.setText("DECRYPTER");
        DECRYPTER.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DECRYPTERActionPerformed(evt);
            }
        });

        VALIDER.setBackground(new java.awt.Color(255, 255, 0));
        VALIDER.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        VALIDER.setText("VALIDER");
        VALIDER.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                VALIDERActionPerformed(evt);
            }
        });

        AFFICHAGE.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jScrollPane2.setViewportView(AFFICHAGE);

        EXIT.setBackground(new java.awt.Color(255, 255, 51));
        EXIT.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        EXIT.setText("<-- PRECEDENT");
        EXIT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EXITActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(34, 34, 34)
                        .addComponent(jLabel1)
                        .addGap(28, 28, 28)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 689, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 675, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(416, 416, 416)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(CRYPTER)
                                .addGap(28, 28, 28)
                                .addComponent(DECRYPTER))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(a, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(63, 63, 63)
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(b, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(101, 101, 101)
                                        .addComponent(jLabel5))
                                    .addComponent(c, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(d, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(478, 478, 478)
                        .addComponent(VALIDER, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(EXIT, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(245, 245, 245)))
                .addContainerGap(21, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(74, 74, 74)
                        .addComponent(jLabel1)
                        .addGap(68, 68, 68))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(a, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3)
                    .addComponent(b, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addComponent(jLabel4))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(c, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5)
                            .addComponent(d, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(DECRYPTER)
                    .addComponent(CRYPTER))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(VALIDER, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(4, 4, 4)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(EXIT, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void bActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_bActionPerformed

    private void cActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cActionPerformed

    private void CRYPTERActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CRYPTERActionPerformed
        String ch ="\t\t\t METHODE DE HILL (CRYPTER)\n\n";
    	
    	String[] bString = new String[MESSAGE.getText().replaceAll("\\s","").length()];
    	
		String etape1="";String etape1F ="";
		String etape2="";String etape2F ="";
		String etape3="";String etape3F ="";
		String etape4="";String etape4F ="";
		if(h.testInver(Integer.parseInt(a.getText()),Integer.parseInt(b.getText()),Integer.parseInt(c.getText())
				,Integer.parseInt(d.getText())) == true){
		if(MESSAGE.getText().replaceAll("\\s","").length()%2==0){
			String[] tabchaine = new String[MESSAGE.getText().replaceAll("\\s","").length()/ 2];
			tabchaine = h.subdiMessage(MESSAGE.getText().replaceAll("\\s",""));
			// le message contient un nombre de caractere paire 
			// codage numerique  traitement
			bString = new String[(MESSAGE.getText().replaceAll("\\s","").length()) / 2];
			for (int i = 0; i < (MESSAGE.getText().replaceAll("\\s","").length()) / 2; i++) {
				bString[i] = h.codageNum(tabchaine[i]);
			}
			for(int i=0;i<MESSAGE.getText().replaceAll("\\s","").length()/2;i++){
				etape1=etape1+"  Cn(" + MESSAGE.getText().replaceAll("\\s","").charAt(2*i)+MESSAGE.getText().replaceAll("\\s","").
						charAt(2*i+1)+ ")=  (" + bString[i].substring(0,2)+","+bString[i].substring(2,4)+")"+ "    "; }
			etape1F="    eatpe 1 :codage numerique    : "+etape1;
			
			// etape 2 : on va stocker toute les chiffrement 
			// dans un tableau de type entier qui s'appele bChiffre
			
			int[] bChiffre = new int[MESSAGE.getText().replaceAll("\\s","").length()];
			bChiffre=h.chiffrementH(MESSAGE.getText(), bString,Integer.parseInt(a.getText())
					, Integer.parseInt(b.getText()),Integer.parseInt(c.getText()), Integer.parseInt(d.getText()));
			for (int i = 0; i <MESSAGE.getText().replaceAll("\\s","").length()/2; i++) {
				etape2=etape2+"   C("+ bString[i].substring(0,2)+","
						+bString[i].substring(2,4)+")"+ "=("+bChiffre[2*i]+";"+bChiffre[2*i+1]+")    ";
			}
			etape2F=etape1F+"\n\n    eatpe 2 :chiffrement               : " +etape2;
			
			// traitement de  etat3 : decodage numerique P(i)
			
			char [] btextchiffre = new char[MESSAGE.getText().replaceAll("\\s","").length()];
			for(int i=0;i<MESSAGE.getText().replaceAll("\\s","").length();i++){
				if(Character.isUpperCase(MESSAGE.getText().replaceAll("\\s","").charAt(i))){
				btextchiffre[i]=h.decodeNummajuscule(bChiffre[i]);}
				else{btextchiffre[i]=h.decodeNumminiscule(bChiffre[i]);}
								}
			//decodage numerique 
			for (int i = 0; i < MESSAGE.getText().replaceAll("\\s","").length()/2; i++) {
				etape3=etape3+"   C-1("+bChiffre[2*i]+";"+bChiffre[2*i+1]+")"+"=" +
						"("+btextchiffre[2*i]+btextchiffre[2*i+1]+")       ";
							}
			etape3F=etape2F+"\n\n    etape 3:decodage numerique :"+etape3;
			for(int i=0;i<MESSAGE.getText().replaceAll("\\s","").length();i++){
				etape4=etape4.concat(btextchiffre[i]+"");
			}
			etape4F=ch+etape3F+"\n\n\n"+" \t\t*********  affichage finel  :  "+etape4+"  ********";
			
	    	CRYPTER.setActionCommand(etape4F);
	    	clickcrypter=true;
		}else{
			//le message contient un nombre de caractere impaire
			
			String MESSAGE1=MESSAGE.getText().replaceAll("\\s","")+'x';
			String[] tabchaine = new String[MESSAGE1.replaceAll("\\s","").length()/ 2];
			tabchaine = h.subdiMessage(MESSAGE1);
			bString = new String[(MESSAGE1.replaceAll("\\s","").length()) / 2];
			for (int i = 0; i < (MESSAGE1.replaceAll("\\s","").length()) / 2; i++) {
				bString[i] = h.codageNum(tabchaine[i]);
			}
			for(int i=0;i<MESSAGE1.length()/2;i++){
				etape1=etape1.concat("  Cn(" + MESSAGE1.replaceAll("\\s","").charAt(2*i)+MESSAGE1.
						charAt(2*i+1)+ ")=  (" + bString[i].substring(0,2)+","+bString[i].substring(2,4)+")"+ "    "); }
			etape1F="    eatpe 1  :codage numerique      : "+etape1;
			
			// etape 2 : on va stocker toute les chiffrement 
			// dans un tableau de type entier qui s'appele bChiffre
			
			int[] bChiffre = new int[MESSAGE1.replaceAll("\\s","").length()];
			bChiffre=h.chiffrementH(MESSAGE1.replaceAll("\\s",""), bString,Integer.parseInt(a.getText())
					, Integer.parseInt(b.getText()),Integer.parseInt(c.getText()), Integer.parseInt(d.getText()));
			for (int i = 0; i <MESSAGE1.replaceAll("\\s","").length()/2; i++) {
				etape2=etape2.concat("   C("+ bString[i].substring(0,2)+","
						+bString[i].substring(2,4)+")"+ "=("+bChiffre[2*i]+";"+bChiffre[2*i+1]+")    ");
			}
			etape2F=etape1F+"\n\n    eatpe 2  :chiffrement                 : " +etape2;
			
			// traitement de  etat3 : decodage numerique P(i)
			
			char [] btextchiffre = new char[MESSAGE1.replaceAll("\\s","").length()];
			for(int i=0;i<MESSAGE1.length();i++){
				if(Character.isUpperCase(MESSAGE1.charAt(i))){
				btextchiffre[i]=h.decodeNummajuscule(bChiffre[i]);}
				else{btextchiffre[i]=h.decodeNumminiscule(bChiffre[i]);}
								}
			//decodage numerique 
			for (int i = 0; i < MESSAGE1.replaceAll("\\s","").length()/2; i++) {
				etape3=etape3.concat("   C-1("+bChiffre[2*i]+";"+bChiffre[2*i+1]+")"+"=("+btextchiffre[2*i]+btextchiffre[2*i+1]+")       ");
							}
			etape3F=etape2F+"\n\n    etape 3 :decodage numerique    :"+etape3;
			for(int i=0;i<MESSAGE1.replaceAll("\\s","").length();i++){
				etape4=etape4.concat(btextchiffre[i]+"");
			}
			etape4F=ch+etape3F+"\n\n\n"+" \t\t*********  affichage finel  :  "+etape4+"  ********";
	    	CRYPTER.setActionCommand(etape4F);
	    	clickcrypter=true;
			
		}
		}else{
			AFFICHAGE.setText("\n\n\n\n\n\t\t\t /!\\matrice n'est pas inversible /!\\ ");
			clickcrypter=true;
		}
    }//GEN-LAST:event_CRYPTERActionPerformed

    private void EXITActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EXITActionPerformed
this.dispose();
    }//GEN-LAST:event_EXITActionPerformed

    private void aActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_aActionPerformed

    private void DECRYPTERActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DECRYPTERActionPerformed
        // TODO add your handling code here:
        MESSAGE.getText().replaceAll("\\s","");
String ch ="\t\t\t METHODE DE HILL (DECRYPTER)\n\n";
    	
    	String[] bString = new String[MESSAGE.getText().replaceAll("\\s","").length()];
    	
		String etape1="";String etape1F ="";
		String etape2="";String etape2F ="";
		String etape3="";String etape3F ="";
		String etape4="";String etape4F ="";
		if(h.testInver(Integer.parseInt(a.getText()),Integer.parseInt(b.getText()),Integer.parseInt(c.getText())
				,Integer.parseInt(d.getText())) == true){
			matriceinvercibeA = h.matricinver(Integer.parseInt(a.getText()),Integer.parseInt(b.getText()),Integer.parseInt(c.getText())
	    			,Integer.parseInt(d.getText()));
		if(MESSAGE.getText().replaceAll("\\s","").length()%2==0){
			String[] tabchaine = new String[MESSAGE.getText().replaceAll("\\s","").length()/ 2];
			tabchaine = h.subdiMessage(MESSAGE.getText().replaceAll("\\s",""));
			// le message contient un nombre de caractere paire 
			// codage numerique  traitement
			bString = new String[(MESSAGE.getText().replaceAll("\\s","").length()) / 2];
			for (int i = 0; i < (MESSAGE.getText().replaceAll("\\s","").length()) / 2; i++) {
				bString[i] = h.codageNum(tabchaine[i]);
			}
			for(int i=0;i<MESSAGE.getText().replaceAll("\\s","").length()/2;i++){
				etape1=etape1.concat("  Cn(" + MESSAGE.getText().replaceAll("\\s","").charAt(2*i)+MESSAGE.getText().replaceAll("\\s","").
						charAt(2*i+1)+ ")=(" + bString[i].substring(0,2)+","+bString[i].substring(2,4)+")"+ "    "); }
			etape1F="    eatpe 1  : codage numerique     :"+etape1;
			
			// etape 2 : on va stocker toute les chiffrement 
			// dans un tableau de type entier qui s'appele bChiffre
			int a1=matriceinvercibeA[0];
			int b1=matriceinvercibeA[1];
			int c1=matriceinvercibeA[2];
			int d1=matriceinvercibeA[3];
			
			
			
			int[] bChiffre = new int[MESSAGE.getText().replaceAll("\\s","").length()];
			bChiffre=h.dechiffrementH(MESSAGE.getText().replaceAll("\\s",""), bString,a1,b1,c1,d1);
			for (int i = 0; i <MESSAGE.getText().replaceAll("\\s","").length()/2; i++) {
				etape2=etape2.concat(" C("+ bString[i].substring(0,2)+","
						+bString[i].substring(2,4)+")"+ "=("+bChiffre[2*i]+";"+bChiffre[2*i+1]+")    ");
			}
			etape2F=etape1F+"\n\n    eatpe 2  :dechiffrement            :" +etape2;
			
			// traitement de  etat3 : decodage numerique P(i)
			
			char [] btextchiffre = new char[MESSAGE.getText().replaceAll("\\s","").length()];
			for(int i=0;i<MESSAGE.getText().replaceAll("\\s","").length();i++){
				if(Character.isUpperCase(MESSAGE.getText().replaceAll("\\s","").charAt(i))){
				btextchiffre[i]=h.decodeNummajuscule(bChiffre[i]);}
				else{btextchiffre[i]=h.decodeNumminiscule(bChiffre[i]);}
								}
			//decodage numerique 
			for (int i = 0; i < MESSAGE.getText().replaceAll("\\s","").length()/2; i++) {
				etape3=etape3.concat("   C-1("+bChiffre[2*i]+";"+bChiffre[2*i+1]+")"+"=("+btextchiffre[2*i]+btextchiffre[2*i+1]+")    ");
							}
			etape3F=etape2F+"\n\n    etape 3:decodage numerique   :"+etape3;
			for(int i=0;i<MESSAGE.getText().replaceAll("\\s","").length();i++){
				etape4=etape4.concat(btextchiffre[i]+"");
			}
			etape4F=ch+etape3F+"\n\n\n"+" \t\t*********  affichage finel  :  "+etape4+"  ********";
	    	DECRYPTER.setActionCommand(etape4F);
	    	clickdecrypter=true;
		}else{
			//le message contient un nombre de caractere impaire
			
			String MESSAGE1=MESSAGE.getText().replaceAll("\\s","")+'x';
			String[] tabchaine = new String[MESSAGE1.length()/ 2];
			tabchaine = h.subdiMessage(MESSAGE1);
			bString = new String[(MESSAGE1.length()) / 2];
			for (int i = 0; i < (MESSAGE1.length()) / 2; i++) {
				bString[i] = h.codageNum(tabchaine[i]);
			}
			for(int i=0;i<MESSAGE1.length()/2;i++){
				etape1=etape1.concat("  Cn(" + MESSAGE1.charAt(2*i)+MESSAGE1.
						charAt(2*i+1)+ ")=(" + bString[i].substring(0,2)+","+bString[i].substring(2,4)+")"+ "    "); }
			etape1F="    eatpe 1  : codage numerique     :"+etape1;
			
			// etape 2 : on va stocker toute les chiffrement 
			// dans un tableau de type entier qui s'appele bChiffre
			int a1=matriceinvercibeA[0];
			int b1=matriceinvercibeA[1];
			int c1=matriceinvercibeA[2];
			int d1=matriceinvercibeA[3];
			int[] bChiffre = new int[MESSAGE1.length()];
			bChiffre=h.chiffrementH(MESSAGE1, bString,a1,b1,c1,d1);
			for (int i = 0; i <MESSAGE1.length()/2; i++) {
				etape2=etape2.concat(" C("+ bString[i].substring(0,2)+","
						+bString[i].substring(2,4)+")"+"=("+bChiffre[2*i]+";"+bChiffre[2*i+1]+")    ");
			}
			etape2F=etape1F+"\n\n    eatpe 2  :chiffrement              :" +etape2;
			
			// traitement de  etat3 : decodage numerique P(i)
			
			char [] btextchiffre = new char[MESSAGE1.replaceAll("\\s","").length()];
			for(int i=0;i<MESSAGE1.length();i++){
				if(Character.isUpperCase(MESSAGE1.charAt(i))){
				btextchiffre[i]=h.decodeNummajuscule(bChiffre[i]);}
				else{btextchiffre[i]=h.decodeNumminiscule(bChiffre[i]);}
								}
			//decodage numerique 
			for (int i = 0; i < MESSAGE1.replaceAll("\\s","").length()/2; i++) {
				etape3=etape3.concat("   C-1("+bChiffre[2*i]+";"+bChiffre[2*i+1]+")"+"=("+btextchiffre[2*i]+btextchiffre[2*i+1]+")           ");
							}
			etape3F=etape2F+"\n\n    etape 3: decodage numerique :"+etape3;
			for(int i=0;i<MESSAGE1.replaceAll("\\s","").length();i++){
				etape4=etape4.concat(btextchiffre[i]+"");
			}
			etape4F=ch+etape3F+"\n\n\n"+" \t\t*********  affichage finel  :  "+etape4+"  ********";
	    	DECRYPTER.setActionCommand(etape4F);
	    	clickdecrypter=true;
			
		}}else{
			AFFICHAGE.setText("\n\n\n\n\n\t\t\t /!\\matrice n'est pas inversible /!\\ ");
			clickdecrypter=true;
			
		}
    }//GEN-LAST:event_DECRYPTERActionPerformed

    private void VALIDERActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_VALIDERActionPerformed
        // TODO add your handling code here:
        if(MESSAGE.getText().isEmpty()&&a.getText().isEmpty()&&b.getText().isEmpty()&&c.getText().isEmpty()
    			&&d.getText().isEmpty()){
    		AFFICHAGE.setText("\n\n\n\n\n\t\t\t /!\\s'il  te plais remplir le  messsage ou  le cle  a /!\\ ");
    		  	}
    	else{
    		if(Integer.parseInt(a.getText())>= 0 &&Integer.parseInt(b.getText()) >= 0
    				&& Integer.parseInt(c.getText()) >= 0 && Integer.parseInt(d.getText()) >= 0){
    			//si les �l�ment de la matrice sont positif 
    		if(h.testInver(Integer.parseInt(a.getText()),Integer.parseInt(b.getText()),Integer.parseInt(c.getText())
    				,Integer.parseInt(d.getText())) == true){//si la matrice est inversible 
    		if(clickcrypter==false&&clickdecrypter==false){
    			
    			AFFICHAGE.setText("\n\n\n\n\n\t\t\t /!\\s'il  te plais appuyer sur un boutton /!\\ ");
    		}
    		else if(clickcrypter==true){
    			AFFICHAGE.setText(CRYPTER.getActionCommand());
    			clickcrypter=false;
    		}
    		else if(clickdecrypter==true){
    			AFFICHAGE.setText(DECRYPTER.getActionCommand());
    			clickdecrypter=false;
    		}}else{
    			
    			AFFICHAGE.setText("\n\n\n\n\n\t\t\t /!\\matrice n'est pas inversible /!\\ ");
    				clickcrypter=false;clickdecrypter=false;
    		
                                
    		}
    		}else{
    			//si une d es �l�ment de la matrice est negatif
    			AFFICHAGE.setText("\n\n\n\n\t\t\t /!\\  entrez  a,b,c,d  positif  /!\\ ");
    		}
    	}
    }//GEN-LAST:event_VALIDERActionPerformed

    private void dActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_dActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FrameHill.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FrameHill.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FrameHill.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FrameHill.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FrameHill().setVisible(true);
            }
        });
    }
    Hill  h = new  Hill();
    ButtonGroup group = new  ButtonGroup();
    boolean clickcrypter=false;
    boolean  clickdecrypter=false;
    int[] matriceinvercibeA = new int[4];
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextPane AFFICHAGE;
    private javax.swing.JRadioButton CRYPTER;
    private javax.swing.JRadioButton DECRYPTER;
    private javax.swing.JButton EXIT;
    private javax.swing.JTextArea MESSAGE;
    private javax.swing.JButton VALIDER;
    private javax.swing.JTextField a;
    private javax.swing.JTextField b;
    private javax.swing.JTextField c;
    private javax.swing.JTextField d;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    // End of variables declaration//GEN-END:variables
}
